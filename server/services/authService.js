"use strict";

const uuidV4 = require("uuid/v4");
const crypto = require("crypto");
var User = require("../models/userModel");

var addUser = function (user) {

    // generate user ID
    user.id = "" + uuidV4();

    return new Promise((resolve, reject) => {
            User.count({email: user.email}, function (err, count) {
                if (count === 0) {

                    /*
                    // Encryption (random Salt + sha512)
                    var saltGenerated = "";
                    var hashGenerated = "";
                    crypto.randomBytes(128, function (err, salt) {
                        if (err) { throw err;}
                        saltGenerated = salt.toString("hex");
                        console.log("salt: " + saltGenerated);

                        crypto.pbkdf2(user.password, saltGenerated, 4096, 512, "sha512", function (err, hash) {
                            if (err) { throw err; }
                            hashGenerated = hash.toString("hex");
                            console.log("hash: " + hashGenerated);
                        })
                    });
                    */

                    var newUser = new User({
                        id: user.id,
                        email: user.email,
                        phoneNumber: user.phoneNumber,
                        address: user.address,
                        parentName: user.parentName,
                        relationship: user.relationship,
                        childName: user.childName,
                        childAge: user.childAge,
                        childGender: user.childGender,
                        childBirthday: user.childBirthday,
                        childInterests: user.childInterests
                    });
                    newUser.save();
                    console.log("Ok! New user's profile document added.");
                    resolve(count);
                } else if (count >= 1) {


                    console.log("Ok! The user's profile document has been updated.");
                    resolve(count);
                } else {
                    reject(err);
                }
            });
    });
};



var updateUserProfile = function (user) {

    // generate user ID
    user.id = "" + uuidV4();

    /*
     // Encryption (random Salt + sha512)
     var saltGenerated = "";
     var hashGenerated = "";
     crypto.randomBytes(128, function (err, salt) {
     if (err) { throw err;}
     saltGenerated = salt.toString("hex");
     console.log("salt: " + saltGenerated);

     crypto.pbkdf2(user.password, saltGenerated, 4096, 512, "sha512", function (err, hash) {
     if (err) { throw err; }
     hashGenerated = hash.toString("hex");
     console.log("hash: " + hashGenerated);
     })
     });
     */

    return new Promise((resolve, reject) => {
        User.update(
            { email: user.email },
            {
                // if the corresponding user profile document exists,
                // update the fields but the id using new values.
                $set: {
                    // do not update the id
                    phoneNumber: user.phoneNumber,
                    address: user.address,
                    parentName: user.parentName,
                    relationship: user.relationship,
                    childName: user.childName,
                    childAge: user.childAge,
                    childGender: user.childGender,
                    childBirthday: user.childBirthday,
                    childInterests: user.childInterests
                },
                // if the corresponding user profile document does not exist,
                // create a new one using the id generated by uuidV4() and email
                // and update other fields with the values in $set.
                $setOnInsert: {
                    id: user.id,
                    email: user.email,
                }
            },
            { upsert: true },
            function(err,ok){
                if(err){
                    console.log("Sorry, The user's profile document failed to be updated.");
                    reject(err);
                }else{
                    console.log("Ok! The user's profile document has been updated.");
                    resolve(ok);
                }
            }
        );
    });
};


var getProfileByEmail = function (user_email) {
    return new Promise((resolve,reject) => {
            User.findOne({email: user_email}, function (err, user) {
            if (user) {
                console.log("Ok! Got the user's profile.");
                // console.log(user); //debug
                resolve(user);
            } else {
                reject(err);
            }
        });
});
};



module.exports = {
    addUser: addUser,
    getProfileByEmail: getProfileByEmail,
    updateUserProfile: updateUserProfile
}
